<?php/*|===========================================================================||	CLASSE DOS MODELOS 														||===========================================================================||																			||	VERSÃO:								1.0.0								||	DATA DA CRIAÇÃO:		 			28/03/2012 							||	DATA DA ÚLTIMA ATUALIZAÇÃO: 		28/03/2012							||	 																		|	|===========================================================================|OBS: TODOS OS MODELOS SÃO HERDADOS DESTA CLASSE DE SISTEMA!!!*/Class Model {	protected $db;		//	É O PONTEIRO UTILIZADO PELO PDO PARA A CONEXÃO COM O BANCO DE DADOS.	public $_tabela;	//	REPRESENTA UMA TABELA DO BANCO DE DADOS			# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 001: [ PUBLIC FUNCTION __CONSTRUCT ]	# ESTE METODO FAZ A CONEXÃO COM O BANCO DE DADOS	# ---------------------------------------------------------------------------------------------------------------------------------				public function __construct() {			$this->db = new PDO('mysql:host='.FW_SERVIDOR.';dbname='.FW_BANCO, FW_USUARIO, FW_PASSWORD);		}	# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 002: [ PUBLIC FUNCTION INSERT ]	# ESTE METODO FAZ A INSERÇÃO DE DADOS NO BANCO	# PARAMETROS:	# 	$dados = É UM ARRAY COM OS CAMPOS E OS DADOS A SEREM GRAVADOS	# ---------------------------------------------------------------------------------------------------------------------------------				public function insert(Array $dados) {			$campos = implode (", ",array_keys($dados));			// TRANSFORMANDO O VETOR CAMPOS EM UMA STRING SEPARADA POR VIRGULA			$valores = "'".implode ("','",array_values($dados))."'";			$this->db->query("INSERT INTO `{$this->_tabela}` ({$campos}) VALUES ({$valores})") or die("ERRO NA GRAVAÇÃO DOS DADOS!!!");		}	# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 003: [ PUBLIC FUNCTION READ ]	# ESTE METODO FAZ A LEITURA DE DADOS NO BANCO	# PARAMETROS:	# 	$where   = É A CONDIÇÃO PARA A LEITURA DOS DADOS	# 	$limit   = QUANTIDADE DE REGISTROS A SEREM LIDOS	#	$offset  = NUMERO DE REFISTROS A OMITIR NO COMECO DA LEITURA	#	$orderby = É A ORDER DE LEITURA DOS REGISTROS 	# ---------------------------------------------------------------------------------------------------------------------------------				public function read( $where = null, $limit = null, $offset = null, $orderby = null) {			$where = ($where != null ? "WHERE {$where}" : "");			$limit = ($limit != null ? "LIMIT {$limit}" : "");			$offset = ($offset != null ? "OFFSET {$offset}" : "");			$orderby = ($orderby != null ? "ORDER BY {$orderby}" : "");				$q = $this->db->query("SELECT * FROM `{$this->_tabela}` {$where} {$orderby} {$limit} {$offset}")  or die("ERRO NA LEITURA DOS DADOS!!!");;			$q->setFetchMode(PDO::FETCH_ASSOC);			return $q->fetchAll();		}			# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 004: [ PUBLIC FUNCTION UPDATE ]	# ESTE METODO FAZ A ALTERACAO DE DADOS NO BANCO	# PARAMETROS:	# 	$where   = É A CONDIÇÃO PARA A ALTERAÇÃO DOS DADOS	# ---------------------------------------------------------------------------------------------------------------------------------					public function update(array $dados, $where) {			foreach($dados as $ind => $val) {				$campos[] = "{$ind} = '{$val}'";			}			$campos = implode(", ",$campos);			$this->db->query("UPDATE `{$this->_tabela}` SET {$campos} WHERE {$where}");		}		# ---------------------------------------------------------------------------------------------------------------------------------	# METODO 005: [ PUBLIC FUNCTION DELETE ]	# ESTE METODO FAZ A EXCLUSÃO DE DADOS NO BANCO	# PARAMETROS:	# 	$where   = É A CONDIÇÃO PARA A EXCLUSÃO DOS DADOS	# ---------------------------------------------------------------------------------------------------------------------------------							public function delete( $where) {			$this->db->query("DELETE FROM `{$this->_tabela}` WHERE {$where}");		}	# --------------------------------------------	# METODOS DE VALIDACAO DE DADOS GENERICOS:		# --------------------------------------------		# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 006 - VALIDAR VAZIO	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarVazio($campo, $conteudo, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);				if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] NAO POR SER VAZIO!!!";		}				if (strlen($conteudo) != 0) {			return "";		}			return $msgErro;	}		# ---------------------------------------------------------------------------------------------------------------------------------		# METODO 007 - VALIDAR STRING NUMERICA 	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $msgErro = mensagem de erro personalizada (opcional)	# $excluir = array com caracteres a escluir da string antes da validacao (OPCIONAL)	# ---------------------------------------------------------------------------------------------------------------------------------		public function ValidarStringNumerica($campo, $conteudo, $msgErro = null, $excluir = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);				if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] CONTEM CARACTERES QUE NAO SAO NUMERICOS!!!";		}				$conteudo = $this->excluirletra($conteudo,$excluir);	//	excluindo caracteres antes da validacao		}				// Verificando se existem caracteres não numericos:		$vet = array("0","1","2","3","4","5","6","7","8","9","-",".");		$valida = true;			for ($ct=0;$ct < strlen($conteudo);$ct++) {				if (!in_array(substr($conteudo,$ct,1),$vet) or (substr($conteudo,$ct,1) == ".")) {					$valida = false;					break;				}				if ($ct == 0) {		//	se o numero e negativo o caracter "-" deve ocupar a posicao inicial...					unset($vet[10]);				}			}		if ($valida == true) {			return "";		}		return $msgErro;	}	# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 008 - VALIDAR STRING MINIMO MAXIMO	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $ValMin  = tamanho minimo do campo (default = 0)	# $ValMax  = tamanho minimo do campo (default = 1000000)		# $msgErro = mensagem de erro personalizada (opcional)		# $excluir = array com caracteres a escluir da string antes da validacao (OPCIONAL)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarStringMinimoMaximo($campo, $conteudo, $ValMin, $ValMax, $msgErro = null, $excluir = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);		// gerenciando valores mínimos e máximos:			if ($ValMin == null) {	//	Se o valor mínimo é nulo o default é zero.			$ValMin = 0;		}		if ($ValMax == null) {	//	Se o valor máximo é nulo o default é 1000000.			$ValMax = 1000000;		}				if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] DEVE TER TAMANHO MINIMO DE " . $ValMin . " E MAXIMO DE " . $ValMax . "!";		}				//echo $ValMin;		//echo $ValMax;		//die();				$conteudo = $this->excluirletra($conteudo,$excluir);	//	excluindo caracteres antes da validacao				// echo strlen($conteudo);		// die();		if (strlen($conteudo) >= $ValMin and strlen($conteudo) <= $ValMax) {			return "";		}			return $msgErro;	}				# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 009 - VALIDAR NUMERO ENTRE VALOR MINIMO MAXIMO	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $ValMin  = tamanho minimo do campo (default = 0)	# $ValMax  = tamanho minimo do campo (default = 1000000)		# $msgErro = mensagem de erro personalizada (opcional)		# $excluir = array com caracteres a escluir da string antes da validacao (OPCIONAL)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarNumeroMinimoMaximo($campo, $conteudo, $ValMin, $ValMax, $msgErro = null, $excluir = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);				// gerenciando valores mínimos e máximos:			if ($ValMin == null) {	//	Se o valor mínimo é nulo o default é zero.			$ValMin = 0;		}		if ($ValMax == null) {	//	Se o valor máximo é nulo o default é 1000000.			$ValMax = 1000000;		}		if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] DEVE TER VALOR MINIMO DE " . $ValMin . " E VALOR MAXIMO DE " . $ValMax . "!";		}				$conteudo = $this->excluirletra($conteudo,$excluir);	//	excluindo caracteres antes da validacao				$tmp = $this->ValidarStringNumerica($campo,$conteudo,null,null);	//	verifica se é um numero...				if ($tmp != "") {			return $tmp;	//	neste caso não é um numero...		}				// echo $conteudo;		// die();		if ((float)$conteudo >= $ValMin and (float)$conteudo <= $ValMax) {			return "";		}			return $msgErro;	}						# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 010 - VALIDAR DATA	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $DataMin  = Data Inicial ("01/01/1900")	# $DataMax  = Data Final   ("01/01/2100")		# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarData($campo, $conteudo, $DataMin = null, $DataMax = null, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);		if ($DataMin == null) {			$DataMin = "01/01/1900";		}		if ($DataMax == null) {			$DataMax = "01/01/2100";		}				if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] DEVE INICIAR EM  " . $DataMin . " E TERMINAR EM " . $DataMax . "!";		}		if ($this->ValidaData($conteudo) == false or (strlen($conteudo) != 10)) {  	//	Verifica se a informação é uma data.			$msgErro = "O CAMPO [" . $campo . "] CONTEM FORMATO DE DATA INVALIDO!";			return $msgErro;		}				//convertendo data para numero crescente.			$DataMin = $this->excluirletra($DataMin,Array("/"));		$DataMin = substr($DataMin,4,4) . substr($DataMin,2,2) . substr($DataMin,0,2);		$DataMax = $this->excluirletra($DataMax,Array("/"));		$DataMax = substr($DataMax,4,4) . substr($DataMax,2,2) . substr($DataMax,0,2);				$conteudo = $this->excluirletra($conteudo,Array("/"));	//	excluindo caracteres antes da validacao		$tmp = $this->ValidarStringNumerica($campo,$conteudo,null,null);	//	verifica se é um numero...				if ($tmp != "") {			return $tmp;	//	neste caso não é um data...		}				$conteudo = substr($conteudo,4,4) . substr($conteudo,2,2) . substr($conteudo,0,2);						if ((int)$conteudo >= (int)$DataMin and (int)$conteudo <= (int)$DataMax) {	//	Verifica Data dentro dos limites			return "";		}			return $msgErro;	}						# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 011 - VALIDAR CAMPO COM VALOR PRE-DETERMINADO	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $valores = array com valores possiveis para o campo	# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarCampoDeterminado($campo, $conteudo, $valores, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);			if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] DEVE CONTER SEGUINTES VALORES: ";			for ($ct=0;$ct<count($valores);$ct++){				$msgErro = $msgErro . $valores[$ct];				if ($ct != (count($valores)-1)) {					$msgErro = $msgErro . ", ";				}			}			$msgErro = $msgErro . ".";		}				// Verificando se existem valores diferentes dos que foram pre-determinados.		if (!in_array($conteudo,$valores)) {			return $msgErro;		}			return "";	}			# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 012 - VALIDAR CAMPO TIME	# PARAMETROS:	# $campo 	= campo do formulario a ser validado		# $conteudo = conteudo do campo do formulario	# $HoraMin  = Hora Inicial ("00:00:00")	# $HoraMax  = Hora Final   ("23:59:59")		# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarHora($campo, $conteudo, $HoraMin = null, $HoraMax = null, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);		$valida = true;			if ($HoraMin == null) {			$HoraMin = "00:00:00";		}		if ($HoraMax == null) {			$HoraMax = "23:59:59";		}		if (substr($conteudo,2,1) != ":" or substr($conteudo,5,1) != ":" ) {	//	se o divisor de hora for diferente de ":" apresenta erro.			$valida = false;		}				$conteudo = $this->excluirletra($conteudo,Array(":"));	//	excluindo caracteres antes da validacao				if (strlen($conteudo) != 6) {	//	tamanho de hora invalido...			$valida = false;		}				if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] DEVE INICIAR EM  " . $HoraMin . " E TERMINAR EM " . $HoraMax . "!";		}				$tmp = $this->ValidarStringNumerica($campo,$conteudo,null,null);	//	verifica se é um numero...		if ($tmp != "") {			$valida = false;		}		$hora = substr($conteudo,0,2);		$minuto = substr($conteudo,2,2);		$segundo = substr($conteudo,4,2);				// echo $hora;		// echo $minuto;		// echo $segundo;				if ((int)$hora < 0 or (int)$hora > 23) {			$valida = false;		}		if ((int)$minuto < 0 or (int)$minuto > 59) {			$valida = false;		}		if ((int)$segundo < 0 or (int)$segundo > 59) {			$valida = false;		}		if ($valida == false) {			return "O CAMPO [" . $campo . "] ESTA COM FORMATO DE HORA INVALIDO!";		}					// VERIFICANDO SE A HORA ESTA ENTRE OS LIMITES:				$tmp = (int)($hora . $minuto . $segundo);				$HoraMin = (int)$this->excluirletra($HoraMin,Array(":"));	//	Hora inicial		$HoraMax = (int)$this->excluirletra($HoraMax,Array(":"));	//	Hora final				if ($tmp < $HoraMin or $tmp > $HoraMax) {		//	Verifica Hora dentro dos limites			return $msgErro;			}		return "";	}		# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 013 - VALIDAR CAMPO DATE TIME	# PARAMETROS:	# $campo 	= campo do formulario a ser validado		# $conteudo = conteudo do campo do formulario	# $DataMin  = Data Inicial ("01/01/1900")	# $DataMax  = Data Final   ("01/01/2100")		# $HoraMin  = Hora Inicial ("00:00:00")	# $HoraMax  = Hora Final   ("23:59:59")		# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarDataHora($campo, $conteudo, $DataMin = null, $DataMax = null, $HoraMin = null, $HoraMax = null, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);		$valida = true;			if ($HoraMin == null) {			$HoraMin = "00:00:00";		}		if ($HoraMax == null) {			$HoraMax = "23:59:59";		}				if ($DataMin == null) {			$DataMin = "01/01/1900";		}		if ($DataMax == null) {			$DataMax = "01/01/2100";		}				if ($msgErro == null) {			$msgErro = "O CAMPO [" . $campo . "] DEVE INICIAR EM  " . $DataMin . " E TERMINAR EM " . $DataMax . "!<br>";			$msgErro .= "O CAMPO [" . $campo . "] DEVE INICIAR EM  " . $HoraMin . " E TERMINAR EM " . $HoraMax . "!";		}				$data = trim(substr($conteudo,0,10));		$time = trim(substr($conteudo,11));				$valida = true;		$tmp = $this->ValidarData($campo, $data, $DataMin, $DataMax, $msgErro);		if ($tmp != "") {			$valida = false;		}		$tmp = $this->ValidarHora($campo, $time, $HoraMin, $HoraMax, $msgErro);		if ($tmp != "") {			$valida = false;		}				if ($valida == false) {			return $msgErro;		}		return "";	}		# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 014 - VALIDAR CPF	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidarCEP($campo, $conteudo, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);		$valida = 1;				if ($msgErro === null) {			$msgErro = "O CAMPO [" . $campo . "] ESTA VAZIO OU TEM CARACTER INVALIDO!!!";		}		if (substr($conteudo,5,1) != "-") {			$valida = 0;		}				$conteudo = $this->excluirletra($conteudo,Array("-"));	//	excluindo caracteres antes da validacao				$tmp = $this->ValidarStringNumerica($campo, $conteudo, null, $excluir = null);		if ($tmp != "") {			$valida = 0;		}				if (strlen($conteudo) != 8) {			$valida = 0;				}				if ($valida == 0){				return $msgErro;		} else {			return "";		}			}			# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 014 - VALIDAR TELEFONE	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidaTel($campo, $conteudo, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);		$valida = 1;				if (strlen($conteudo) == 0) {			return "";		}				$tmp = $this->ValidarStringNumerica($campo,$conteudo, null,array("-","(",")") );		if ($tmp != "") {			$valida = 0;		}					$tmp = $this->ValidarStringMinimoMaximo($campo, $conteudo, $ValMin = 10, $ValMax = 10, $msgErro = null, array("-","(",")"));		if ($tmp != "") {			$valida = 0;		}				if ($msgErro === null) {			$msgErro = "O CAMPO [" . $campo . "] TEM CARACTER OU FORMATO INVALIDO!!!";		}				if ($valida == 0){				return $msgErro;		} else {			return "";		}			}			# ---------------------------------------------------------------------------------------------------------------------------------				# METODO 015 - VALIDAR E-MAIL	# PARAMETROS:	# $campo 	= campo do formulario a ser validado	# $conteudo = conteudo do campo do formulario	# $msgErro = mensagem de erro personalizada (opcional)		# ---------------------------------------------------------------------------------------------------------------------------------				public function ValidaEmail($campo, $conteudo, $msgErro = null) {		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);		$vetor = array("A","B", "C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q",					   "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Á", "À", "Â","Â","É", "È",					   "Ê","Í","Ì","Î","Ó","Ò","Ô","Õ","Ú","Ù","Û");		if (strlen($conteudo) == 0) {	//	comando para evitar campo obrigatorio...			return "";		}					   		if ($msgErro === null) {			$msgErro = "O CAMPO [" . $campo . "] ESTA VAZIO OU INVALIDO!!!";		}				// verifica se existe @		$valida = false;			$posic = 0;		for ($ct = 0;$ct<strlen($conteudo);$ct++) {			if (substr($conteudo,$ct,1) == "@") {				$valida = true;				$posic = $ct;				break;			}		}		if ($valida == false or $posic ==  0) {	//	@ deve existir e não deve ser o primeiro caracter			return $msgErro;		}				$valida = true;		for ($ct = 0;$ct<count($vetor);$ct++) {			if ( in_array(substr($conteudo,$ct,1), $vetor)) {				$valida = false;				break;			}		}				if ($valida == false) {	 // verifica caracteres maiusculos			return $msgErro;		}					$valida = false;		// verifica se existe . depois de @		for ($ct = $posic+1;$ct<strlen($conteudo);$ct++) {			if (substr($conteudo,$ct,1) == ".") {				$valida = true;				break;			}		}		//	. deve existir depois de @		// 	. não deve ser exatamente depois de @ ou ser o ultimo caracter		if ($valida == false or $ct == $posic+1 or $ct == (strlen($conteudo)-1)) {				return $msgErro;		} else {			return "";		}			}			# ----------------------------------------	# VALIDAR CPF	# ----------------------------------------	function ValidaCPF($campo,$conteudo,$msgErro=null){		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);				if (strlen($conteudo) == 0) {	//	torna campo não obrigatorio			return "";		}		if ($msgErro === null) {			$msgErro = "O CAMPO [" . $campo . "] E INVALIDO!!!";		}				$ver = new cpfcnpjLib;		if($ver->cpf($conteudo)){			return "";		} else {			return $msgErro;			}	}			# ----------------------------------------	# VALIDAR CNPJ	# ----------------------------------------	function ValidaCNPJ($campo,$conteudo,$msgErro=null){		$campo = strtoupper(trim($campo));		$conteudo = trim($conteudo);				if (strlen($conteudo) == 0) {	//	torna campo não obrigatorio			return "";		}		if ($msgErro === null) {			$msgErro = "O CAMPO [" . $campo . "] E INVALIDO!!!";		}				$ver = new cpfcnpjLib;		if($ver->cnpj($conteudo)){			return "";		} else {			return $msgErro;			}	}		# ---------------------------------------------------------------------		# METODO AUXILIAR PARA EXCLUIR CARACTERES DE UMA STRING		# ----------------------------------------------------------------------	private function excluirletra($conteudo,$excluir = null) {		if ($excluir != null) {		//	ARRAY PARA EXCLUIR DETERMINADO caracter do conteudo...			for ($ct=0;$ct < count($excluir);$ct++) {				$conteudo = str_replace($excluir[$ct],"",$conteudo);			}		}				return $conteudo;	}	# ---------------------------------------------------------------------		# METODO AUXILIAR PARA VALIDAR DATA	# a data vede entrar no formato dia/mes/ano	# ----------------------------------------------------------------------	private function ValidaData($data) {		$valida = true;				// formato:	01/01/2000				if (substr($data,2,1) != "/" or substr($data,5,1) != "/" ) {	//	se o divisor de data for diferente de "/" apresenta erro.			$valida = false;		}				$ano = (int)substr($data,6,4);		$mes = (int)substr($data,3,2);		$dia = (int)substr($data,0,2);				if ($ano < 0 or $ano > 9999) {			$valida = false;		}		if ($mes < 1 or $mes > 12) {			$valida = false;		}			# verifica ano bissexto:		# Passo 1: Verificar se o ano é divisível por 4		$bissexto = false;		if ($ano % 4 == 0) {			if (($ano % 100 == 0) and ($ano % 400 == 0)) {				$bissexto = true;			} 			if ($ano % 100 != 0) {				$bissexto = true;						}		}				// verificando quantos dias tem o mes:		if ($mes == 1 or $mes == 3  or $mes == 5  or $mes == 7  or $mes == 8  or $mes == 10  or $mes == 12) {			$maximoDia = 31;		} elseif ($mes == 2) {			if ($bissexto == true) {				$maximoDia = 29;			} else {				$maximoDia = 28;			}		} else {			$maximoDia = 30;		}		if ($dia < 1 or $dia > $maximoDia) {			$valida = false;		}				return $valida;	}		// FUNCAO AUXILIAR QUE GERENCIA SESSOES DE ERRO		public function VerErro($tmp) {		if ($tmp != "") {			$_SESSION["ERRO". $_SESSION['posic_erro'] ] = $tmp;			$_SESSION['posic_erro'] = $_SESSION['posic_erro'] + 1;		}	}				}	// FINAL DA CLASSE ------------------------------------------------------------------------------------------------------------------		?>